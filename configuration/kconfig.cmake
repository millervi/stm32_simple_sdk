# Set default values for build settings lists
set(KCONFIG_SETTINGS_BUILD_MCU_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_MCU_FLOAT_ENABLE_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS "")
set(KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS "")

#[[
The function run configuration/scripts/kconfig.py for generate autoconf.h file.
]]
function(kconfig_update_configuration)
    message(STATUS "Kconfig update configuration")
    execute_process(COMMAND python ${CMAKE_SOURCE_DIR}/configuration/scripts/kconfig.py
        ${CMAKE_SOURCE_DIR}/Kconfig
        ${CMAKE_SOURCE_DIR}/configuration/autoconf.h
        ${CMAKE_SOURCE_DIR}/.config
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        RESULT_VARIABLE CODE
    )
    if(NOT "${CODE}" STREQUAL "0")
    message(FATAL_ERROR "Command failed with return code: ${CODE}")
endif()
endfunction()

#[[
Parse a KConfig fragment (typically with extension .config) and
introduce all the symbols that are prefixed with 'PREFIX' into the
CMake namespace.

PREFIX input argument, CONFIG_

KCONFIG_FRAGMENT input argument, .config file

KEYS output optional argument if present
]]
function(import_kconfig PREFIX KCONFIG_FRAGMENT)
  # Parse the lines prefixed with 'prefix' in ${KCONFIG_FRAGMENT}
  file(
    STRINGS
    ${KCONFIG_FRAGMENT}
    DOT_CONFIG_LIST
    REGEX "^${PREFIX}"
    ENCODING "UTF-8"
  )
  foreach(CONFIG ${DOT_CONFIG_LIST})
    # CONFIG could look like: CONFIG_NET_BUF=y
    # Match the first part, the variable name
    string(REGEX MATCH "[^=]+" CONF_VARIABLE_NAME ${CONFIG})
    # Match the second part, variable value
    string(REGEX MATCH "=(.+$)" CONF_VARIABLE_VALUE ${CONFIG})
    # The variable name match we just did included the '=' symbol. To just get the
    # part on the RHS we use match group 1
    set(CONF_VARIABLE_VALUE ${CMAKE_MATCH_1})
    if("${CONF_VARIABLE_VALUE}" MATCHES "^\"(.*)\"$") # Is surrounded by quotes
      set(CONF_VARIABLE_VALUE ${CMAKE_MATCH_1})
    endif()
    set("${CONF_VARIABLE_NAME}" "${CONF_VARIABLE_VALUE}" PARENT_SCOPE)
    list(APPEND KEYS "${CONF_VARIABLE_NAME}")
  endforeach()
  foreach(OUT_VAR ${ARGN})
    set(${OUT_VAR} "${KEYS}" PARENT_SCOPE)
  endforeach()
endfunction()

#[[
Get global list of mcu flags.

MCU_FLAGS output argument, multivalue list of mcu flags, 
sede in the project configuration menu
]]
function(kconfig_get_mcu_flags MCU_FLAGS)
    if(CONFIG_CORE_PROCESSOR_M0)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mcpu=cortex-m0")
    elseif(CONFIG_CORE_PROCESSOR_M0_PLUS)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mcpu=cortex-m0plus")
    elseif(CONFIG_CORE_PROCESSOR_M3)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mcpu=cortex-m3")
    elseif(CONFIG_CORE_PROCESSOR_M4)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mcpu=cortex-m4")
    endif()
    if(NOT CONFIG_FPU_NONE)
        if(CONFIG_FPU_UNIT_FPV4_SP_D16)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mfpu=fpv4-sp-d16")
        endif()
        if(CONFIG_FPU_ABI_SOFTWARE)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mfloat-abi=soft")
        elseif(CONFIG_FPU_ABI_HARDWARE)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mfloat-abi=hard")
        elseif(CONFIG_FPU_ABI_MIX)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mfloat-abi=softfp")
        endif()
    endif()
    if(CONFIG_INSTRUCTION_SET_THUMB_2)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " -mthumb")
    endif()
    if(NOT CONFIG_CXX_ON)
        if(CONFIG_RUNTIME_LIBRARY_STANDARD_C)
            # TODO comment
        endif()
        if(CONFIG_RUNTIME_LIBRARY_REDUCED_C)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " --specs=nano.specs")
        endif()
    else()
        if(CONFIG_RUNTIME_LIBRARY_STANDARD_C_STANDARD_CXX)
            # TODO comment
        elseif(CONFIG_RUNTIME_LIBRARY_STANDARD_C_REDUCED_CXX)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " --specs=standard_c_nano_cpp.specs")
        elseif(CONFIG_RUNTIME_LIBRARY_REDUCED_C_STANDARD_CXX)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " --specs=nano_c_standard_cpp.specs")
        elseif(CONFIG_RUNTIME_LIBRARY_REDUCED_C_REDUCED_CXX)
            string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLAGS " --specs=nano.specs")
        endif()
    endif()
    set(${MCU_FLAGS} ${KCONFIG_SETTINGS_BUILD_MCU_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of flag enable float for printf scanf.

MCU_FLOAT_ENABLE_FLAGS output argument, list of flag enable float for printf, 
sede in the project configuration menu
]]
function(kconfig_get_mcu_flags_of_float_for_printf_scanf_enable MCU_FLOAT_ENABLE_FLAGS)
    if(CONFIG_PRINTF_FLOAT_ENABLE)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLOAT_ENABLE_FLAGS " -u _printf_float")
    endif()
    if(CONFIG_SCANF_FLOAT_ENABLE)
        string(APPEND KCONFIG_SETTINGS_BUILD_MCU_FLOAT_ENABLE_FLAGS " -u _scanf_float")
    endif()
    set(${MCU_FLOAT_ENABLE_FLAGS} ${KCONFIG_SETTINGS_BUILD_MCU_FLOAT_ENABLE_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of gcc ASM flags.

GCC_ASSEMBLER_FLAGS output argument, multivalue list of gcc assembler flags, 
sede in the project configuration menu
]]
function(kconfig_get_gcc_assembler_flags GCC_ASSEMBLER_FLAGS)
    if(CONFIG_GCC_ASSEMBLER_GENERAL_WARNINGS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -Wa,-W")
    endif()
    if(CONFIG_GCC_ASSEMBLER_DEBUGING_NONE)
        # TODO comment
    elseif(CONFIG_GCC_ASSEMBLER_DEBUGING_MINIMAL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -g1")
    elseif(CONFIG_GCC_ASSEMBLER_DEBUGING_DEFAULT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -g")
    elseif(CONFIG_GCC_ASSEMBLER_DEBUGING_MAXIMUM)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -g3")
    endif()
    if(CONFIG_GCC_ASSEMBLER_PREPROCESSOR_PREPROCESS_ONLY)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -E")
    endif()
    if(CONFIG_GCC_ASSEMBLER_PREPROCESSOR_EXCLUDE_SYSTEM_DIRS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -nostdinc")
    endif()
    if(CONFIG_GCC_ASSEMBLER_PREPROCESSOR_PREPROCESS_ASSEMBLER)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " -x assembler-with-cpp")
    endif()
    if("${CONFIG_GCC_ASSEMBLER_MISC_OTHER_FLAGS}" STREQUAL "")
        # TODO comment
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS " ${CONFIG_GCC_ASSEMBLER_MISC_OTHER_FLAGS}")
    endif()
    set(${GCC_ASSEMBLER_FLAGS} ${KCONFIG_SETTINGS_BUILD_GCC_ASSEMBLER_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of gcc compiler flags.

GCC_COMPILER_FLAGS output argument, multivalue list of gcc compiler flags, 
sede in the project configuration menu
]]
function(kconfig_get_gcc_compiler_flags GCC_COMPILER_FLAGS)
    if(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_C90_ANSI_C89)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=c90")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_C99)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=c99")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_C11)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=c11")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_C17)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=c17")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_GNU90)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=gnu90")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_GNU99)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=gnu99")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_GNU11)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=gnu11")
    elseif(CONFIG_GCC_COMPILER_GENERAL_LANGUAGE_STANDARD_GNU17)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -std=gnu17")
    endif()
    if(CONFIG_GCC_COMPILER_DEBUGING_NONE)
        # TODO comment
    elseif(CONFIG_GCC_COMPILER_DEBUGING_MINIMAL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -g1")
    elseif(CONFIG_GCC_COMPILER_DEBUGING_DEFAULT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -g")
    elseif(CONFIG_GCC_COMPILER_DEBUGING_MAXIMUM)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -g3")
    endif()
    if(CONFIG_GCC_COMPILER_PREPROCESSOR_PREPROCESS_ONLY)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -E")
    endif()
    if(CONFIG_GCC_COMPILER_PREPROCESSOR_EXCLUDE_SYSTEM_DIRS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -nostdinc")
    endif()
    if(CONFIG_GCC_COMPILER_OPTIMIZATION_NONE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -O0")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_DEBUG)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Og")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -O1")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE_MORE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -O2")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE_MOST)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -O3")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_SIZE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Os")
    elseif(CONFIG_GCC_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_SPEED)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Ofast")
    endif()
    if(CONFIG_GCC_COMPILER_OPTIMIZATION_FUNCTION_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -ffunction-sections")
    endif()
    if(CONFIG_GCC_COMPILER_OPTIMIZATION_DATA_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -fdata-sections")
    endif()
    if(CONFIG_GCC_COMPILER_OPTIMIZATION_SLOW_FLASH_DATA AND NOT CONFIG_CXX_ON)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -mslow-flash-data")
    endif()
    if(CONFIG_GCC_COMPILER_OPTIMIZATION_NO_STRICT_ALIASING)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -fno-strict-aliasing")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_ALL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wall")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_EXTRA)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wextra")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_ERROR)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Werror")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_FATAL_ERRORS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wfatal-errors")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_PEDANTIC)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -pedantic")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_PEDANTIC_ERRORS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -pedantic-errors")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_MISSING_INCLUDE_DIRS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wmissing-include-dirs")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_SWITCH_DEFAULT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wswitch-default")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_SWITCH_ENUM)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wswitch-enum")
    endif()
    if(CONFIG_GCC_COMPILER_WARNINGS_CONVERSION)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -Wconversion")
    endif()
    if(CONFIG_GCC_COMPILER_MISC_VERBOSE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -v")
    endif()
    if(CONFIG_GCC_COMPILER_MISC_PIC)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -fPIC")
    endif()
    if(CONFIG_GCC_COMPILER_MISC_STACK_USAGE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " -fstack-usage")
    endif()
    if("${CONFIG_GCC_COMPILER_MISC_OTHER_FLAGS}" STREQUAL "")
        # TODO comment
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS " ${CONFIG_GCC_COMPILER_MISC_OTHER_FLAGS}")
    endif()
    set(${GCC_COMPILER_FLAGS} ${KCONFIG_SETTINGS_BUILD_GCC_COMPILER_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of gcc linker flags.

GCC_LINKER_FLAGS output argument, multivalue list of gcc linker flags, 
sede in the project configuration menu
]]
function(kconfig_get_gcc_linker_flags GCC_LINKER_FLAGS)
    if("${CONFIG_GCC_LINKER_GENERAL_LINKER_SCRIPT}" STREQUAL "")
        message(FATAL_ERROR "Add linker script in build settings.")
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -T${CMAKE_SOURCE_DIR}/${CONFIG_GCC_LINKER_GENERAL_LINKER_SCRIPT}")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_SYSTEM_CALLS_NONE)
        # TODO comment
    elseif(CONFIG_GCC_LINKER_GENERAL_SYSTEM_CALLS_MINIMAL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " --specs=nosys.specs")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_CROSS_REFERENCE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -Wl,--cref")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_DISCARD_UNUSED_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -Wl,--gc-sections")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_VERBOSE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -Wl,--verbose")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_NO_START_FILES)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -nostartfiles")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_NO_DEFAULT_LIBS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -nodefaultlibs")
    endif()
    if(CONFIG_GCC_LINKER_GENERAL_NO_STANDARD_LIBS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -nostdlib")
    endif()
    if(CONFIG_GCC_LINKER_LIBRARIES_C_MATH_LIBRARY)
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " -Wl,--start-group -lc -lm -Wl,--end-group")
    endif()
    if("${CONFIG_GCC_LINKER_MISC_OTHER_FLAGS}" STREQUAL "")
        # TODO comment
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS " ${CONFIG_GCC_LINKER_MISC_OTHER_FLAGS}")
    endif()
    set(${GCC_LINKER_FLAGS} ${KCONFIG_SETTINGS_BUILD_GCC_LINKER_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of gxx compiler flags.

GXX_COMPILER_FLAGS output argument, multivalue list of gxx compiler flags, 
sede in the project configuration menu
]]
function(kconfig_get_gxx_compiler_flags GXX_COMPILER_FLAGS)
    if(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_CXX98)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=c++98")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_CXX11)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=c++11")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_CXX14)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=c++14")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_ISO_CXX17)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=c++17")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_GNUXX98)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=gnu++98")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_GNUXX11)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=gnu++11")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_GNUXX14)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=gnu++14")
    elseif(CONFIG_GXX_COMPILER_GENERAL_LANGUAGE_STANDARD_GNUXX17)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -std=gnu++17")
    endif()
    if(CONFIG_GXX_COMPILER_DEBUGING_NONE)
    # TODO comment
    elseif(CONFIG_GXX_COMPILER_DEBUGING_MINIMAL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -g1")
    elseif(CONFIG_GXX_COMPILER_DEBUGING_DEFAULT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -g")
    elseif(CONFIG_GXX_COMPILER_DEBUGING_MAXIMUM)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -g3")
    endif()
    if(CONFIG_GXX_COMPILER_PREPROCESSOR_PREPROCESS_ONLY)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -E")
    endif()
    if(CONFIG_GXX_COMPILER_PREPROCESSOR_EXCLUDE_SYSTEM_DIRS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -nostdinc")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_NONE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -O0")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_DEBUG)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Og")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -O1")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE_MORE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -O2")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE_MOST)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -O3")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_SIZE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Os")
    elseif(CONFIG_GXX_COMPILER_OPTIMIZATION_OPTIMIZE_FOR_SPEED)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Ofast")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_FUNCTION_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -ffunction-sections")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_DATA_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fdata-sections")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_NO_STRICT_ALIASING)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fno-strict-aliasing")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_EXCEPTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fno-exceptions")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_RTTI)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fno-rtti")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_THREAD_SAFE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fno-threadsafe-statics")
    endif()
    if(CONFIG_GXX_COMPILER_OPTIMIZATION_CXA_ATEXIT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fno-use-cxa-atexit")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_ALL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wall")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_EXTRA)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wextra")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_ERROR)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Werror")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_FATAL_ERRORS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wfatal-errors")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_PEDANTIC)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -pedantic")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_PEDANTIC_ERRORS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -pedantic-errors")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_MISSING_INCLUDE_DIRS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wmissing-include-dirs")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_SWITCH_DEFAULT)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wswitch-default")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_SWITCH_ENUM)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wswitch-enum")
    endif()
    if(CONFIG_GXX_COMPILER_WARNINGS_CONVERSION)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -Wconversion")
    endif()
    if(CONFIG_GXX_COMPILER_MISC_VERBOSE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -v")
    endif()
    if(CONFIG_GXX_COMPILER_MISC_PIC)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fPIC")
    endif()
    if(CONFIG_GXX_COMPILER_MISC_STACK_USAGE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " -fstack-usage")
    endif()
    if("${CONFIG_GXX_COMPILER_MISC_OTHER_FLAGS}" STREQUAL "")
        # TODO comment
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS " ${CONFIG_GXX_COMPILER_MISC_OTHER_FLAGS}")
    endif()
    set(${GXX_COMPILER_FLAGS} ${KCONFIG_SETTINGS_BUILD_GXX_COMPILER_FLAGS} PARENT_SCOPE)
endfunction()

#[[
Get global list of gxx linker flags.

GXX_LINKER_FLAGS output argument, multivalue list of gxx linker flags, 
sede in the project configuration menu
]]
function(kconfig_get_gxx_linker_flags GXX_LINKER_FLAGS)
    if("${CONFIG_GXX_LINKER_GENERAL_LINKER_SCRIPT}" STREQUAL "")
        message(FATAL_ERROR "Add linker script in build settings.")   
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -T${CMAKE_SOURCE_DIR}/${CONFIG_GXX_LINKER_GENERAL_LINKER_SCRIPT}")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_SYSTEM_CALLS_NONE)
        # TODO comment
    elseif(CONFIG_GXX_LINKER_GENERAL_SYSTEM_CALLS_MINIMAL)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " --specs=nosys.specs")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_CROSS_REFERENCE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -Wl,--cref")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_DISCARD_UNUSED_SECTIONS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -Wl,--gc-sections")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_VERBOSE)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -Wl,--verbose")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_NO_START_FILES)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -nostartfiles")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_NO_DEFAULT_LIBS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -nodefaultlibs")
    endif()
    if(CONFIG_GXX_LINKER_GENERAL_NO_STANDARD_LIBS)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -nostdlib")
    endif()
    if(CONFIG_GXX_LINKER_LIBRARIES_C_MATH_LIBRARY)
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " -Wl,--start-group -lc -lm -lstdc++ -lsupc++ -Wl,--end-group")
    endif()
    if("${CONFIG_GXX_LINKER_MISC_OTHER_FLAGS}" STREQUAL "")
        # TODO comment
    else()
        string(APPEND KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS " ${CONFIG_GXX_LINKER_MISC_OTHER_FLAGS}")
    endif()
    set(${GXX_LINKER_FLAGS} ${KCONFIG_SETTINGS_BUILD_GXX_LINKER_FLAGS} PARENT_SCOPE)
endfunction()